{"componentChunkName":"component---templates-blog-template-js","path":"/blog/implementing-deep-linking-in-react-native/","result":{"data":{"ghostPost":{"id":"Ghost__Post__610cd502b9956c0555c7f7a9","slug":"implementing-deep-linking-in-react-native","title":"Implementing Deep linking in  React native mobile apps","html":"<p><em>Learnings from implementing Deep linking in Chatwoot mobile apps</em></p><p>We live in a world where things are interlinked. We share links more frequently than ever before and want our customers to reach their desired pages swiftly, regardless of their platforms. Deep links could help significantly in enhancing this experience.</p><h2 id=\"what-is-deep-linking\">What is deep linking?</h2><p>Deep linking enables a user to navigate to specific content in a mobile application using a URL.</p><p>Deep links are web links that can activate your app and contain information needed to load specific app sections. They can be used as triggers in external events like <em>push notification, emails, web links etc.</em></p><p>They enable users to save more time and energy without locating a particular page by themselves â€“ significantly improving the user experience.</p><p>Note: The \"deep\" refers to the depth of the page in a hierarchical app structure of pages.</p><h2 id=\"why-deep-linking\">Why deep linking?</h2><p>Deeplinking enhances the user experience for mobile app users. Before implementing Deep linking In Chatwoot, a user on a mobile device clicking on a conversation link received via an email would be taken to the web browser, even if they have the Chatwoot app installed.</p><p>With deep linking, the Chatwoot app can open the conversation screen based on the id in the URL. Then, when the user clicks on a link, it will open the app, and the user is navigated to the exact point in the app where they are destined. This is a much better user experience.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://www.chatwoot.com/c672ada90e37eecfd0ae0beaff4f976d/deeplinking-demo.gif\" class=\"kg-image\" alt=\"deep-linking-demo\" loading=\"lazy\"></figure><h2 id=\"how-to-implement-deep-linking\">How to implement Deep Linking?</h2><p>Deep links can be implemented in ios and android by the following methods :</p><ul><li>Custom URL scheme (iOS Universal Links)</li><li>Intent URL (Android)</li></ul><h2 id=\"configuration-for-android\">Configuration for Android</h2><p>Add an <a href=\"https://developer.android.com/guide/components/intents-filters\">intent-filter</a> in AndroidManifest.xml to specify the host link</p><pre><code>&lt;data android:scheme=\"https\" android:host=\"http://app.chatwoot.com/\" /&gt;\n</code></pre><p>Then build the project. To test this action, run the following command in your terminal.</p><pre><code class=\"language-bash\">adb shell am start -W -a android.intent.action.VIEW -d \"https://app.chatwoot.com/app/accounts/1/conversations/12121\" com.chatwoot.app\n</code></pre><p>Now the app will open up successfully if everything went well.</p><h2 id=\"configuration-for-ios\">Configuration for iOS</h2><p>Apple recommends Universal links as the way to open your web links in your mobile app.</p><p>To support universal linking in iOS, we need to add some configuration on the server-side as well. First, the endpoint must use HTTPS.</p><p>Your server has to have a route that is defined as a get request with the path <strong>/apple-app-site-association.</strong>. When a request is made to that path, you must return a file with the configuration recommended below.</p><pre><code>{\n    \"applinks\": {\n        \"apps\": [],\n        \"details\": [\n            {\n                \"appID\": \"&lt;TeamID&gt;.&lt;Bundle-Identifier&gt;\",\n                \"paths\": [ \"NOT /super_admin/*\", \"*\" ]\n            }\n        ]\n    }\n}\n</code></pre><h2 id=\"implementation-on-the-server-side\">Implementation on the server-side</h2><p>Apart from the configurations required in your mobile app, you would also need to implement some changes on your server for deep links to work for ios.</p><p>Here is an example implementation for a ruby on rails server.</p><p><strong>routes.rb</strong></p><pre><code class=\"language-ruby\">get 'apple-app-site-association' =&gt; 'apple_app#site_association'\n</code></pre><p><strong>app/controllers/apple_controller.rb</strong></p><pre><code class=\"language-ruby\">class AppleController &lt; ApplicationController\n  def site_association\n    site_association_json = render_to_string action: 'site_association', layout: false\n    send_data site_association_json, filename: 'apple-app-site-association', type: 'application/json'\n  end\nend\n</code></pre><p><strong>app/views/apple<em>app/site</em>association.html.erb</strong></p><pre><code class=\"language-ruby\">{\n    \"applinks\": {\n        \"apps\": [],\n        \"details\": [\n            {\n                \"appID\": \"&lt;%= ENV['IOS_APP_ID'] %&gt;\",\n                \"paths\": [ \"NOT /super_admin/*\", \"*\" ]\n            }\n        ]\n    }\n}\n</code></pre><p>Find the implementation of Universal links in Chatwoot in this <a href=\"https://github.com/chatwoot/chatwoot/pull/805\">pull request</a>.</p><p>Once your server endpoint is ready, Launch Xcode. Select the Signing &amp; <strong>Capabilities</strong> tab and then select the enable <strong>Associated Domains</strong> and add domains. Make sure to prefix the domain with <code>applinks:</code> in place of <code>https://</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://www.chatwoot.com/static/b85130d2d4fa3ed12bf6372cf618f580/16abd/deeplinking-xcode.png\" class=\"kg-image\" alt=\"deeplinking-xcode\" loading=\"lazy\" title=\"deeplinking-xcode\"></figure><p>Find the implementation of Universal links in Chatwoot mobile app in this <a href=\"https://github.com/chatwoot/chatwoot-mobile-app/pull/297\">pull request</a>.</p><h2 id=\"final-steps\">Final Steps</h2><p>Once our app is ready to handle deep Links, we need to implement actions to navigate the user to required screens. React native has <a href=\"https://reactnative.dev/docs/linking\">Linking</a> module, which will provide API that allows us to listen for an incoming linked url.</p><p>Linking gives you a general interface to interact with incoming app links. For example, if an app link triggered the app launch, it provides the link url. Otherwise, it will provide null. If we get the link url, it redirects to the exact screen based on the incoming URL.</p><pre><code class=\"language-javascript\">useEffect(() =&gt; {\n // Get the deep link used to open the app\n   const initialUrl = await Linking.getInitialURL();\n // Redirect to particualr screen based on inital url\n   navigation.navigate('ChatScreen');\n}, []);\n</code></pre><p>Your mobile app should now be ready to handle deep links if you have followed the above instructions. Thank you for reading, and I hope you liked it. Please let us know if you have any doubts ;)</p>","published_at":"2021-07-14T06:22:00.000+00:00","feature_image":"https://www-internal-blog.chatwoot.com/content/images/2021/08/deeplinking-banner.png","excerpt":"Learnings from implementing Deep linking in Chatwoot mobile apps\nWe live in a world where things are interlinked. We share links more frequently than ever before and want our customers to reach their desired pages...","primary_author":{"profile_image":"https://www-internal-blog.chatwoot.com/content/images/2021/08/Screenshot-2021-08-15-at-2.39.18-PM.png","name":"Muhsin K"},"meta_title":null,"meta_description":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null}},"pageContext":{"coverImage":"https://www-internal-blog.chatwoot.com/content/images/2021/08/deeplinking-banner.png","slug":"implementing-deep-linking-in-react-native"}},"staticQueryHashes":["3358003245"]}