{"componentChunkName":"component---templates-blog-template-js","path":"/blog/manage-external-service-callbacks-with-local-tunnel/","result":{"data":{"ghostPost":{"id":"Ghost__Post__610cd46fb9956c0555c7f79b","slug":"manage-external-service-callbacks-with-local-tunnel","title":"External service callbacks made easy with LocalTunnel","html":"<p><em>Improve development experience with external service callbacks from Facebook, Twitter, Twilio etc., using LocalTunnel.</em></p><h2 id=\"working-with-third-party-integrations\">Working with third-party integrations</h2><p>As a product developer, one of the biggest pain points that you come across might be related to working with callbacks (mostly webhooks) from third party systems in your local development environment. Most of us use some tunnelling software to expose our local server to the internet and then use that URL for the callbacks.</p><p>There are some pain points with this setup. Usually, tunnelling software has this annoying side-effect of changing the exposed URL every time you restart. If you have shared it with your colleagues for testing, you would have to send the new URL again. If you are working on the webhook callbacks with third-party integrations, like Facebook, Twitter, Zapier, Twilio, etc., this becomes frustrating. Every time you restart the tunnel, you have to go to the developer console and update the callback URL. This workflow is cumbersome, and often we forget this and spend a good amount of time debugging on other things.</p><h2 id=\"chatwoots-context\">Chatwoot's Context</h2><p>At Chatwoot, we have multi-channel support and have inbox support for Facebook, Twitter, Twilio, Slack, chatbots, and various email platforms. We constantly struggled with this problem.</p><p>One way to mitigate the problem was by getting individual paid accounts for every team member and get a static URL for the tunnel. This approach solved some of the issues as we don't need to update the callback URLs every time we restart the local system. For the entire period of development, the URL stays the same.</p><p>Everything seemed good initially. After some time, we started running into problems again with this setup. When multiple engineers work on a single integration, they have to change the callback URL to their tunnel URL whenever they work on it. Nobody called dibs on this, and often we forget to check the callback URL when we start the work. We were on the path to expand our integrations as a part of the omnichannel support and we wanted a better development experience.</p><p>We needed the API callback URLs to stay constant, and it should be easy for any developer to get hold of that tunnel URL. As a possible solution, we looked for open source tunnelling softwares that we could host and customize. That is when we came across LocalTunnel and fell in love with it.</p><h2 id=\"what-is-localtunnel\">What is LocalTunnel?</h2><p>LocalTunnel exposes your localhost to the world for easy testing and sharing. It is an open-source software. (<a href=\"https://github.com/localtunnel/localtunnel\">https://github.com/localtunnel/localtunnel</a>). From the number of stars and forks of this project, you can see that the community loves this product.</p><h2 id=\"how-did-we-set-it-up\">How did we set it up?</h2><p>We decided to set up our own LocalTunnel on a Digital Ocean droplet. We followed <a href=\"https://medium.com/quark-works/running-your-own-reverse-proxy-with-localtunnel-b1658e239c35\">this</a> excellent article written by Alex to host LocalTunnel on Digital Ocean. In addition to the setup guide, we had to open a range of ports on the droplet to allow TCP connections.</p><p>We pointed one of the subdomains to the droplet that runs LocalTunnel, which looks something like <code>https://tunnel.example.com</code>.</p><h2 id=\"development-workflow\">Development Workflow</h2><p>To start working with LocalTunnel, you have to install the LocalTunnel client on your machine using the following command.</p><pre><code class=\"language-bash\">npm install -g localtunnel\n</code></pre><p>You can connect to the LocalTunnel server by specifying the port and a host name.</p><pre><code class=\"language-bash\">lt --port 3000 --host http://tunnel.example.com\n</code></pre><p>By default, LocalTunnel would generate a subdomain using random characters. The URL would look like <code>https://[random-characters].tunnel.example.com</code></p><p>In addition to this, LocalTunnel allows you to request a named subdomain on the LocalTunnel server.</p><pre><code class=\"language-bash\">lt --port 3000 --host http://tunnel.example.com --subdomain customsubdomain\n</code></pre><p>This feature allowed us to standardize the list of subdomains to the external services as seen below:</p><!--kg-card-begin: html--><table>\n<thead>\n<tr>\n<th>Service</th>\n<th>Subdomain</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Facebook</td>\n<td>fb-dev.tunnel.example.com</td>\n</tr>\n<tr>\n<td>Sendgrid</td>\n<td>sendgrid-dev.tunnel.example.com</td>\n</tr>\n<tr>\n<td>Mailgun</td>\n<td>mailgun-staging.tunnel.example.com</td>\n</tr>\n<tr>\n<td>Twitter</td>\n<td>twitter-staging.tunnel.example.com</td>\n</tr>\n<tr>\n<td>Twilio</td>\n<td>twilio-dev.tunnel.example.com</td>\n</tr>\n</tbody>\n</table><!--kg-card-end: html--><p>An important thing to note here is that when we use a subdomain, for example, Facebook development as <code>fb-dev.tunnel.example.com</code>, we set all the callbacks on the Facebook developer account to this subdomain. Similarly, we set the callback URL on the Twitter developer account for Twitter app development to <code>twitter-dev.tunnel.example.com</code> and so on.</p><p>For working on Facebook inbox, we would connect to the standard tunnel URL:</p><pre><code class=\"language-bash\">lt --host http://tunnel.example.com --subdomain fb-dev --port 3000\n</code></pre><p>With this approach, we solved both problems mentioned above.</p><ol><li>Now that you had a standard set of URLs, you don't have to go to the developer console every time to change it.</li><li>Any team member can get hold of any of these tunnels using their LocalTunnel Client seamlessly.</li></ol><p>This approach has improved our development workflow to a great extend. The developers don't have to worry about the URL they would use in development. If they conform to the standard URL, everything works seamlessly.</p><p>Let us know if you have any questions or if this article helped you in improving your development experience. We are all ears. :)</p>","published_at":"2021-05-06T06:20:00.000+00:00","feature_image":"https://www-internal-blog.chatwoot.com/content/images/2021/08/local_tunnel_ts.png","excerpt":"Improve development experience with external service callbacks from Facebook, Twitter, Twilio etc., using LocalTunnel. Working with third-party integrations As a product developer, one of the biggest pain points that you come across might be related to working withâ€¦","primary_author":{"profile_image":"https://www-internal-blog.chatwoot.com/content/images/2021/08/zQK4swoV_400x400.jpg","name":"Sony Mathew"},"meta_title":null,"meta_description":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null}},"pageContext":{"coverImage":"https://www-internal-blog.chatwoot.com/content/images/2021/08/local_tunnel_ts.png","slug":"manage-external-service-callbacks-with-local-tunnel"}},"staticQueryHashes":["3358003245"]}